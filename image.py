import base64

def image_to_base64(image_path):
    with open(image_path, "rb") as image_file:
        # Read image file in binary mode and encode it to base64
        base64_string = base64.b64encode(image_file.read()).decode('utf-8')
    return base64_string

# Function to store the Base64 string in a file
def store_base64(base64_string, output_file):
    with open(output_file, "w") as file:
        file.write(base64_string)
def base64_to_image(base64_string, output_image_path):
    # Decode the Base64 string
    image_data = base64.b64decode(base64_string)

    # Write the image data to a file
    with open(output_image_path, "wb") as image_file:
        image_file.write(image_data)

    print(f"Image saved as {output_image_path}")


base64_string = ""
    
    # Output path for the image
output_image_path = "output_image.png"  # Change this to your desired file path

    # Call the function to save the image
# base64_to_image(base64_string, output_image_path)